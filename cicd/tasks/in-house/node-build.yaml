apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: node-build
  namespace: infra
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Kubernetes
    tekton.dev/tags: CLI, kubectl
    tekton.dev/displayName: "Git Flux Validation"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task builds a Node.js application.
  params:
    - name: group-id
    - name: package
    - name: context-dir
      default: "."
    - name: build-output-dir
      default: "dist"
    - name: environment
      default: ""
    - name: node-image
      default: node:22.5.1
    - name: alpine-image
      default: docker.io/alpine:3.20.1
    - name: nginx-image
      default: nginx:1.27.0
    - name: kaniko-image
      default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
  workspaces:
    - name: source
    - name: node-local-repo
  results:
    - name: package-dir
    - name: distribution
  steps:
    - name: build
      image: $(params.node-image)
      script: |
        #!/bin/bash

        set -euo pipefail

        get_context_dir() {
          local context_dir=$(params.context-dir)
          if [ "${context_dir}" == "." ] || [ -z "${context_dir}" ]; then
            printf $(workspaces.source.path)
          else
            printf $(workspaces.source.path)/$(params.context-dir)
          fi
        }

        build() {
          local package_dir=$(params.group-id)/$(params.package)
          local absolute_package_path=$(workspaces.node-local-repo.path)/"${package_dir}"
          local node_modules="${absolute_package_path}/node_modules"

          mkdir -p "${node_modules}"

          yarn config set -- --modules-folder "${node_modules}"

          local source_dir=$(get_context_dir)

          cp -r "${source_dir}"/* "${absolute_package_path}"
          
          cd "${absolute_package_path}"

          yarn install --configuration $(params.environment)
          yarn build --configuration $(params.environment)

          printf "%s" "${package_dir}" > $(results.package-dir.path)
        }

        set_distribution() {
          local build_output_dir=$(params.build-output-dir)
          local files=( $(find "${build_output_dir}" -name index.html -type f | xargs ls -A) )

          local index_html="${files[0]}"

          if [ -n "${index_html}" ]; then
              local distribution=$(dirname $index_html)
              printf "%s" ${distribution} > $(results.distribution.path)
          fi
        }

        build
        set_distribution
