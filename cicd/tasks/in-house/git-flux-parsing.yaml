apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-flux-parsing
  namespace: infra
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Kubernetes
    tekton.dev/tags: CLI, kubectl
    tekton.dev/displayName: "Git Flux Parsing"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task either returns the passed in Git repository URL and revision or retrieve them from the specified manifest file in the specified workspace.

  params:
    - name: url
      default: ""
    - name: revision
      default: ""
    - name: manifest-file
      default: ""
    - name: image
      default: docker.io/mikefarah/yq:4.44.2
  workspaces:
    - name: manifest-dir
  results:
    - name: url
    - name: revision
  steps:
    - name: parse
      image: $(params.image)
      workingDir: $(workspaces.manifest-dir.path)
      script: |
        set -euo pipefail

        url=$(echo $(params.url) | xargs)
        revision=$(echo $(params.revision) | xargs)
        manifest_file=$(params.manifest-file)

        green_color='\033[0;32m'
        red_color='\033[0;31m'
        default_color='\033[0m'

        if [ -z "${url}" ]; then
          printf "The supplied URL is blank\n"
          printf "Ignoring the %s supplied revision\n" "${revision}"

          printf "Checking the %s supplied manifest file\n" "${manifest_file}"

          if [ ! -f "${manifest_file}" ]; then
            printf "${red_color}The %s manifest file does not exist!${default_color}\n" "${manifest_file}"
            exit 1
          fi

          printf "The supplied %s manifest file was found\n" "${manifest_file}"
          
          if [ ! -s "${manifest_file}" ] ; then
            printf "${red_color}The supplied %s manifest file is empty${default_color}\n" "${manifest_file}"
            exit 1
          else
            printf "Extracting the URL and revision from %s\n" "${manifest_file}"

            manifest_content=$(cat "${manifest_file}")

            url=$(echo "${manifest_content}" | yq .spec.url)
            revision=$(echo "${manifest_content}" | yq .spec.ref.branch)

            printf "\nThe extracted URL is ${green_color}%s${default_color}\n" "${url}"
            printf "The extracted revision is ${green_color}%s${default_color}\n" "${revision}"
          fi
        else
          printf "The supplied URL is ${green_color}%s${default_color}\n" "${url}"
          printf "The supplied revision is ${green_color}%s${default_color}\n" "${revision}"
          if [ -n "${manifest_file}" ]; then
            printf "Ignoring the %s manifest file\n" "${manifest_file}"
          fi
        fi

        printf "%s" "${url}" > $(results.url.path)
        printf "%s" "${revision}" > $(results.revision.path)

