apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: image-pull-endpoint
  namespace: infra
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Kubernetes
    tekton.dev/tags: CLI, kubectl
    tekton.dev/displayName: "Image Pull Endpoint"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task retrieves the image pull endpoint from a config map named env-settings

  params:
    - name: kubectl-image
      default: gcr.io/cloud-builders/kubectl@sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753
    - name: yq-image
      default: docker.io/mikefarah/yq:4.44.2
  results:
    - name: image-pull-endpoint
  steps:
    - name: get-config-map
      image: $(params.kubectl-image)
      script: |
        #!/bin/bash

        set -euo pipefail

        config_maps_dir=/workspace/config-maps

        mkdir -p "${config_maps_dir}"

        config_map_name=env-settings

        env_settings="${config_maps_dir}/${config_map_name}.yaml"

        kubectl get configmap "${config_map_name}" -n infra -o yaml > "${env_settings}"

        chmod 644 "${env_settings}"

        printf "The %s config map has been retrieved successfully with the below content:\n\n" "${config_map_name}"
        cat "${env_settings}"
    - name: retrieve-image-pull-endpoint
      image: $(params.yq-image)
      script: |
        #!/bin/sh

        set -euo pipefail

        image_pull_endpoint=$(cat /workspace/config-maps/env-settings.yaml | yq '.data.image-pull-endpoint')

        printf "%s" "${image_pull_endpoint}" > $(results.image-pull-endpoint.path)

        printf "The retrieved image pull endpoint is %s" "${image_pull_endpoint}"
